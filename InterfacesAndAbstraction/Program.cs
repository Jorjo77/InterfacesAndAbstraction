using System;

namespace InterfacesAndAbstraction
{
    class Program
    {
        static void Main(string[] args)
        {
            //Абстракция - да използваме само информацията която ни интересува в даден контекст и забравяме маловажната за дадения контекст; Обратното на абстракция е конкретика. В програмирането винаги търсим абстракцията, как можем да погледнем нещата от птичи поглед и това да ни опрости кода и работата. Абсатракцията ни е най-големия приятел, когато се борим със сложни проекти (проблеми). Важна задача на ООП е да направи кода по-четим, по разбираем. Абстракцията е много важна за да може един код да е разбираем. Без абстракция, трудно се разбира кода. 
            //Абстракцията ни помага да разберем какво прави един обект, а не как го прави!!!
            //Двата основни начина да постигнем абстракция са с интерфейси и с абстрактни класове. Много често вместо интерфейс можем да срещнем contract или договор, тъй като Абстракцията казва какво точно ще прави един клас, какво е важното (като договор си е). 
            //Енкапсулацията е на ниво клас, ниво обект, докато Абстракцията е на по - високо ниво, тя е на ниво много обекти, много класове, на ниво йерархия, на ниво архитектура (как комуникират различните класове, как се подават данни, как знаят едни други за себе си).
            //Енкапсулацията се постига с access modifiers, а Абстракцията  с интерфейси и с абстрактни класове. Различни са, но се допълват много добре. Абстракцията помага да не повтаряме код.
            //Абстракцията маха конкретните наща и оставя общите между различни обекти. Общите неща пишем на интерфейси. По този начин лесно ще можем да решим от едно място да изберем и променим ако желаем конкретната имплементация. Така става лесно променянето на кода и преизползването. Можем да гледаме на абстракцията като преобразуване на нашия обект към нещо по общо, което ще ни свърши работа, нещо по-общо специално за случая който ни трябва.
            //Абстракцията показва само нещата които ще са нужни за дадена операция, нищо повече!

            Store store = new Store();
            User user = new User();
            user.Money = 500;
            store.BuyShoe(new Shoe(), user);
            store.BuyToothbrush(new Toothbrush(), user);
            store.BuyToothbrush(new Toothbrush(), user);
        }
    }
}
